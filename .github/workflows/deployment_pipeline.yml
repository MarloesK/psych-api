name: Deploy API

on:
  push:
    branches:
      - add-gh-actions

permissions:
  id-token: write
  contents: read

env:
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  IMAGE_TAG: latest
  LAMBDA_FUNCTION_NAME: psych_api
  DOCKER_IMAGE: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Test pipeline
        shell: bash
        run: | 
          echo 'this pipeline runs' 
          echo $ECR_REGISTRY
          echo $ECR_REPOSITORY
          echo $IMAGE_TAG
          echo $ECR_REGISTRY/$ECR_REPOSITORY
          echo $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 2
      - name: Setup AWS CLI
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
      #    role-session-name: samplerolesession
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Build image
        shell: bash
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
      - name: Push Image
        shell: bash
        run: |
          docker push $DOCKER_IMAGE
          echo image $DOCKER_IMAGE was pushed successfully!


  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Setup AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
#          role-session-name: samplerolesession
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Deploy
        run: | 
          aws lambda update-function-code --function-name $LAMBDA_FUNCTION_NAME --image-uri $DOCKER_IMAGE --publish
